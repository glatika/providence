// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: deliveries/grpc/market/market_pb/service.proto

package market_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BarnMarketProviderClient is the client API for BarnMarketProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarnMarketProviderClient interface {
	GetAllStock(ctx context.Context, in *GetAllPagingRequest, opts ...grpc.CallOption) (BarnMarketProvider_GetAllStockClient, error)
	GetAllStockTasks(ctx context.Context, in *GetAllPagingRequest, opts ...grpc.CallOption) (BarnMarketProvider_GetAllStockTasksClient, error)
	RegisterStockVariant(ctx context.Context, in *RegisterStockVariantRequest, opts ...grpc.CallOption) (*Empty, error)
	RegisterTaskToStock(ctx context.Context, in *RegisterTaskToStockRequest, opts ...grpc.CallOption) (*RegisterTaskToStockResponse, error)
}

type barnMarketProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewBarnMarketProviderClient(cc grpc.ClientConnInterface) BarnMarketProviderClient {
	return &barnMarketProviderClient{cc}
}

func (c *barnMarketProviderClient) GetAllStock(ctx context.Context, in *GetAllPagingRequest, opts ...grpc.CallOption) (BarnMarketProvider_GetAllStockClient, error) {
	stream, err := c.cc.NewStream(ctx, &BarnMarketProvider_ServiceDesc.Streams[0], "/BarnMarketProvider/GetAllStock", opts...)
	if err != nil {
		return nil, err
	}
	x := &barnMarketProviderGetAllStockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BarnMarketProvider_GetAllStockClient interface {
	Recv() (*Stock, error)
	grpc.ClientStream
}

type barnMarketProviderGetAllStockClient struct {
	grpc.ClientStream
}

func (x *barnMarketProviderGetAllStockClient) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *barnMarketProviderClient) GetAllStockTasks(ctx context.Context, in *GetAllPagingRequest, opts ...grpc.CallOption) (BarnMarketProvider_GetAllStockTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BarnMarketProvider_ServiceDesc.Streams[1], "/BarnMarketProvider/GetAllStockTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &barnMarketProviderGetAllStockTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BarnMarketProvider_GetAllStockTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type barnMarketProviderGetAllStockTasksClient struct {
	grpc.ClientStream
}

func (x *barnMarketProviderGetAllStockTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *barnMarketProviderClient) RegisterStockVariant(ctx context.Context, in *RegisterStockVariantRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/BarnMarketProvider/RegisterStockVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barnMarketProviderClient) RegisterTaskToStock(ctx context.Context, in *RegisterTaskToStockRequest, opts ...grpc.CallOption) (*RegisterTaskToStockResponse, error) {
	out := new(RegisterTaskToStockResponse)
	err := c.cc.Invoke(ctx, "/BarnMarketProvider/RegisterTaskToStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarnMarketProviderServer is the server API for BarnMarketProvider service.
// All implementations must embed UnimplementedBarnMarketProviderServer
// for forward compatibility
type BarnMarketProviderServer interface {
	GetAllStock(*GetAllPagingRequest, BarnMarketProvider_GetAllStockServer) error
	GetAllStockTasks(*GetAllPagingRequest, BarnMarketProvider_GetAllStockTasksServer) error
	RegisterStockVariant(context.Context, *RegisterStockVariantRequest) (*Empty, error)
	RegisterTaskToStock(context.Context, *RegisterTaskToStockRequest) (*RegisterTaskToStockResponse, error)
	mustEmbedUnimplementedBarnMarketProviderServer()
}

// UnimplementedBarnMarketProviderServer must be embedded to have forward compatible implementations.
type UnimplementedBarnMarketProviderServer struct {
}

func (UnimplementedBarnMarketProviderServer) GetAllStock(*GetAllPagingRequest, BarnMarketProvider_GetAllStockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStock not implemented")
}
func (UnimplementedBarnMarketProviderServer) GetAllStockTasks(*GetAllPagingRequest, BarnMarketProvider_GetAllStockTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStockTasks not implemented")
}
func (UnimplementedBarnMarketProviderServer) RegisterStockVariant(context.Context, *RegisterStockVariantRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStockVariant not implemented")
}
func (UnimplementedBarnMarketProviderServer) RegisterTaskToStock(context.Context, *RegisterTaskToStockRequest) (*RegisterTaskToStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTaskToStock not implemented")
}
func (UnimplementedBarnMarketProviderServer) mustEmbedUnimplementedBarnMarketProviderServer() {}

// UnsafeBarnMarketProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarnMarketProviderServer will
// result in compilation errors.
type UnsafeBarnMarketProviderServer interface {
	mustEmbedUnimplementedBarnMarketProviderServer()
}

func RegisterBarnMarketProviderServer(s grpc.ServiceRegistrar, srv BarnMarketProviderServer) {
	s.RegisterService(&BarnMarketProvider_ServiceDesc, srv)
}

func _BarnMarketProvider_GetAllStock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPagingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BarnMarketProviderServer).GetAllStock(m, &barnMarketProviderGetAllStockServer{stream})
}

type BarnMarketProvider_GetAllStockServer interface {
	Send(*Stock) error
	grpc.ServerStream
}

type barnMarketProviderGetAllStockServer struct {
	grpc.ServerStream
}

func (x *barnMarketProviderGetAllStockServer) Send(m *Stock) error {
	return x.ServerStream.SendMsg(m)
}

func _BarnMarketProvider_GetAllStockTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPagingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BarnMarketProviderServer).GetAllStockTasks(m, &barnMarketProviderGetAllStockTasksServer{stream})
}

type BarnMarketProvider_GetAllStockTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type barnMarketProviderGetAllStockTasksServer struct {
	grpc.ServerStream
}

func (x *barnMarketProviderGetAllStockTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _BarnMarketProvider_RegisterStockVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStockVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarnMarketProviderServer).RegisterStockVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BarnMarketProvider/RegisterStockVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarnMarketProviderServer).RegisterStockVariant(ctx, req.(*RegisterStockVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarnMarketProvider_RegisterTaskToStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskToStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarnMarketProviderServer).RegisterTaskToStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BarnMarketProvider/RegisterTaskToStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarnMarketProviderServer).RegisterTaskToStock(ctx, req.(*RegisterTaskToStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarnMarketProvider_ServiceDesc is the grpc.ServiceDesc for BarnMarketProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarnMarketProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BarnMarketProvider",
	HandlerType: (*BarnMarketProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStockVariant",
			Handler:    _BarnMarketProvider_RegisterStockVariant_Handler,
		},
		{
			MethodName: "RegisterTaskToStock",
			Handler:    _BarnMarketProvider_RegisterTaskToStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStock",
			Handler:       _BarnMarketProvider_GetAllStock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllStockTasks",
			Handler:       _BarnMarketProvider_GetAllStockTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deliveries/grpc/market/market_pb/service.proto",
}
