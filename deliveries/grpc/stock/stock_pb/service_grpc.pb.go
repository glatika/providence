// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: deliveries/grpc/stock/stock_pb/service.proto

package stock_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockLifecycleClient is the client API for StockLifecycle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockLifecycleClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Request(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	Report(ctx context.Context, opts ...grpc.CallOption) (StockLifecycle_ReportClient, error)
}

type stockLifecycleClient struct {
	cc grpc.ClientConnInterface
}

func NewStockLifecycleClient(cc grpc.ClientConnInterface) StockLifecycleClient {
	return &stockLifecycleClient{cc}
}

func (c *stockLifecycleClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/StockLifecycle/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockLifecycleClient) Request(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/StockLifecycle/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockLifecycleClient) Report(ctx context.Context, opts ...grpc.CallOption) (StockLifecycle_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockLifecycle_ServiceDesc.Streams[0], "/StockLifecycle/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockLifecycleReportClient{stream}
	return x, nil
}

type StockLifecycle_ReportClient interface {
	Send(*ReportRequest) error
	CloseAndRecv() (*ReportResponse, error)
	grpc.ClientStream
}

type stockLifecycleReportClient struct {
	grpc.ClientStream
}

func (x *stockLifecycleReportClient) Send(m *ReportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stockLifecycleReportClient) CloseAndRecv() (*ReportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockLifecycleServer is the server API for StockLifecycle service.
// All implementations must embed UnimplementedStockLifecycleServer
// for forward compatibility
type StockLifecycleServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Request(context.Context, *TaskRequest) (*TaskResponse, error)
	Report(StockLifecycle_ReportServer) error
	mustEmbedUnimplementedStockLifecycleServer()
}

// UnimplementedStockLifecycleServer must be embedded to have forward compatible implementations.
type UnimplementedStockLifecycleServer struct {
}

func (UnimplementedStockLifecycleServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStockLifecycleServer) Request(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedStockLifecycleServer) Report(StockLifecycle_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedStockLifecycleServer) mustEmbedUnimplementedStockLifecycleServer() {}

// UnsafeStockLifecycleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockLifecycleServer will
// result in compilation errors.
type UnsafeStockLifecycleServer interface {
	mustEmbedUnimplementedStockLifecycleServer()
}

func RegisterStockLifecycleServer(s grpc.ServiceRegistrar, srv StockLifecycleServer) {
	s.RegisterService(&StockLifecycle_ServiceDesc, srv)
}

func _StockLifecycle_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockLifecycleServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockLifecycle/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockLifecycleServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockLifecycle_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockLifecycleServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockLifecycle/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockLifecycleServer).Request(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockLifecycle_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockLifecycleServer).Report(&stockLifecycleReportServer{stream})
}

type StockLifecycle_ReportServer interface {
	SendAndClose(*ReportResponse) error
	Recv() (*ReportRequest, error)
	grpc.ServerStream
}

type stockLifecycleReportServer struct {
	grpc.ServerStream
}

func (x *stockLifecycleReportServer) SendAndClose(m *ReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stockLifecycleReportServer) Recv() (*ReportRequest, error) {
	m := new(ReportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockLifecycle_ServiceDesc is the grpc.ServiceDesc for StockLifecycle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockLifecycle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StockLifecycle",
	HandlerType: (*StockLifecycleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _StockLifecycle_Register_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _StockLifecycle_Request_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _StockLifecycle_Report_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deliveries/grpc/stock/stock_pb/service.proto",
}
